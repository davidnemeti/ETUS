using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;

using ETUS.DomainModel2.Expressions;
using SchemaLanguage;

using ICollection = System.Collections.Generic.ICollection;

namespace ETUS.DomainModel2
{
    public class Package
    {
        public NamespaceUsings : ICollection[NamespaceUsing] { get; set; }
        public NamespaceDeclaration : NamespaceDeclaration { get; set; }
        public Definitions : ICollection[Definition] { get; set; }
    }

    public class NamespaceUsing
    {
        public NameRef : NameRef { get; set; }
    }

    public class NamespaceDeclaration
    {
        public Name : Name { get; set; }
    }

    public variant Definition : SchemaLanguage.Definition
    {
        public Name : Name { get; set; }

        | Prefix    { Factor : Expression { get; set; } }
        | Unit      {
            new Quantity : Reference[Quantity] { get; set; }
            Conversions : ICollection[Conversion] { get; set; }
        }
        | Quantity
    }

    public variant Conversion
    {
        public OtherUnit : Reference[Definition.Unit] { get; set; }
        public Direction : Direction { get; set; }

        | Simple    {
            Factor : Expression { get; set; }
            Unit : UnitExpression { get; set; }
        }
        | Complex   { Expr : ExpressionWithUnit { get; set; } }
    }

    public enum Direction
    {
        | BiDir
        | To
        | From
    }

    public enum Constant
    {
        | PI
    }
    module dfd
    {
        ffoo() : void
        {
            def unit : Definition.Unit = Definition.Unit(null, null);
            def foo : Reference[Definition.Unit] = unit.GetReference();
            def foo2 : Reference[Definition] = unit.GetReference();
            def foo3 : Reference[Definition] = foo;
            def boo = foo.Definition;
            def boo3 = foo3.Definition;
        }
    }
}
